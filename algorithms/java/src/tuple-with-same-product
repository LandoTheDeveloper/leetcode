/*
Given an array nums of distinct positive integers, return the number of tuples (a, b, c, d) such that a * b = c * d where a, b, c, and d are elements of nums, and a != b != c != d.
*/

class Solution {
    public int tupleSameProduct(int[] nums) {
        HashMap<Integer, Integer> productCount = new HashMap<>();
        int res = 0;
        
        // Generate all product pairs
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                int product = nums[i] * nums[j];

                // If product already exists, count how many times it has appeared
                res += productCount.getOrDefault(product, 0);

                // Store or update product count
                productCount.put(product, productCount.getOrDefault(product, 0) + 1);
            }
        }

        return res * 8; // Each valid pair contributes 8 unique tuples
    }
}
